name: Final - paralell jobs # it gonna be a workflow name in GitHub portal
description: Combination of Part 1 and 2, jobs run in parallel

on:
  push:
    branches:
    - main
  pull_request:

jobs:
# FIRST JOB #######################################################################   
  build-test-image:
    name: Build Docker Image for testing
    runs-on: ubuntu-latest

    permissions:
      packages: write # needed to push docker image to ghcr.io, used for GITHUB_TOKEN variable
    
    steps:
      # debug info
      - name: Debug GitHub event name
        run: echo Triggered by:${{ github.event_name }}

      - name: Debug GitHub run id
        run: echo Workflow run ID is:${{ github.run_id }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # build and push a temporary image to GHCR. After this we have an image in Docker engine (not registry)
      - name: Build and Push to GHCR
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ghcr.io/justinasjk/docker2:${{ github.run_id }} # github repository path
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

# NEXT JOB #######################################################################   
  test-unit:
    name: Unit tests in Docker
    needs: [build-test-image]
    runs-on: ubuntu-latest

    # permissions:
    #   packages: read

    steps:

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Debug, check what images we have
      - name: List docker images
        run: docker image ls

      - name: Unit Testing in Docker engine
        run: |
          docker run --rm ghcr.io/justinasjk/docker2:${{ github.run_id }} echo "run test commands here"

# NEXT JOB #######################################################################
  test-integration:
    name: Integration tests in Docker Composer
    needs: [build-test-image]
    runs-on: ubuntu-latest

    # permissions:
    #   packages: read

    steps:

    - name: Checkout git repo
      uses: actions/checkout@v2

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to ghcr.io registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test healthcheck in Docker Compose
      run: |
        export TESTING_IMAGE=ghcr.io/justinasjk/docker2:"$GITHUB_RUN_ID"
        echo Testing image: "$TESTING_IMAGE"
        docker compose -f docker-compose.test.yml up --exit-code-from sut

# NEXT JOB #######################################################################
  test-k3d:
    name: Test Deployment in Kubernetes
    needs: [build-test-image]
    runs-on: ubuntu-latest

    # permissions:
    #   packages: read

    steps:

      - name: Checkout git repo
        uses: actions/checkout@v2
      
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
          
      - name: Smoke test deployment in k3d Kubernetes
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=https://ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          export TESTING_IMAGE=ghcr.io/justinasjk/docker2:"$GITHUB_RUN_ID"
          envsubst < manifests/deployment.yaml  | kubectl apply -f -
          kubectl rollout status deployment myapp
          kubectl exec deploy/myapp -- curl --fail localhost
          
          








      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

     # testing temporary image in k3d Kubernetes at github registry   
      - name: Smoke test deployment in k3d Kubernetes
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=https://ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          export TESTING_IMAGE=ghcr.io/justinasjk/docker2:"$GITHUB_RUN_ID"
          envsubst < manifests/deployment.yaml  | kubectl apply -f -
          kubectl rollout status deployment myapp
          kubectl exec deploy/myapp -- curl --fail localhost

    # testing of K8s has finished

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true # Export to Docker Engine rather than pushing to a registry
          tags: ${{ github.run_id }}
          target: test # build only "test" stage, value takne from Dockerfile
          cache-from: type=gha # Uses GitHub Actions cache to speed up future builds
          cache-to: type=gha,mode=max #Stores cache layers to avoid rebuilding unchanged parts
          platforms: linux/amd64

      - name: List docker images
        run: docker image ls

        # for simple tests (npm test, etc.) just run a local image in docker
      - name: Unit Testing in Docker
        run: |
          docker run --rm ${{ github.run_id }} echo "run test commands here"

        # integration tests
      - name: Test healthcheck in Docker Compose
        run: |
          export TESTING_IMAGE="${{ github.run_id }}"
          docker compose -f docker-compose.test.yml up --exit-code-from sut

      # run scans of the image at Docker engine without actions
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 0
          format: table 

      # run scans of the image at Docker engine and block if critical vulner. exists
      - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 1
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'
        
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Docker Metadata for Final Image Build
        id: docker_meta_jk
        uses: docker/metadata-action@v5
        with:
          images: justinask01/docker2 # List of Docker images to use as base name for tags. Value taken from Docker repository
          flavor: |
            latest=false
          tags: |
            type=raw,value=07

      - name: Docker Build and Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.docker_meta_jk.outputs.tags}}
          labels: ${{ steps.docker_meta_jk.outputs.labels}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pla tforms: linux/amd64,linux/arm64
