name: Part 2 - build and test image # it gonna be a workflow name in GitHub portal
description: This workflow builds and pushes a Docker image using BuildKit cache.

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    
    steps:

      - name: Debug GitHub event name
        run: echo Triggered by:${{ github.event_name }}

      - name: Debug GitHub run id
        run: echo Workflow run ID is:${{ github.run_id }}

        # we use GitHub repo for scanning
      - name: Checkout git repo
        uses: actions/checkout@v4

      # Without QEMU, Docker can only build images for the host's architecture
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Allows you to build images for different architectures, like linux/amd64, linux/arm64, etc.
      # Also allows you to use BuildKit cache.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          push: false
          load: true # Export to Docker Engine rather than pushing to a registry
          tags: ${{ github.run_id }}
          target: test # build only "test" stage, value takne from Dockerfile
          cache-from: type=gha # Uses GitHub Actions cache to speed up future builds
          cache-to: type=gha,mode=max #Stores cache layers to avoid rebuilding unchanged parts
          platforms: linux/amd64

      - name: List docker images
        run: docker image ls

        # for simple tests (npm test, etc.) just run a local image in docker
      - name: Unit Testing in Docker
        run: |
          docker run --rm ${{ github.run_id }} echo "run test commands here"

        # integration tests
      - name: Test healthcheck in Docker Compose
        run: |
          export TESTING_IMAGE="${{ github.run_id }}"
          docker compose -f docker-compose.test.yml up --exit-code-from sut

      # run scans of the image at Docker engine without actions
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 0
          format: table 

      # run scans of the image at Docker engine and block if critical vulner. exists
      - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 1
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'
        
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Docker Metadata for Final Image Build
        id: docker_meta_jk
        uses: docker/metadata-action@v5
        with:
          images: justinask01/docker2 # List of Docker images to use as base name for tags
          flavor: |
            latest=false
          tags: |
            type=raw,value=07

      - name: Docker Build and Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.docker_meta_jk.outputs.tags}}
          labels: ${{ steps.docker_meta_jk.outputs.labels}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pla tforms: linux/amd64,linux/arm64
